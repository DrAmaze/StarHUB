{"version":3,"sources":["serviceWorker.js","components/repos/repoListItem.jsx","components/repos/repoList.jsx","components/utility/navbar.jsx","components/utility/footer.jsx","components/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Component","RepoList","GET_FEED_QUERY","gql","_templateObject","react_default","a","createElement","react_apollo_browser_umd","query","_ref","loading","error","data","console","log","renderingRepos","feed","repos","map","repo","count","length","React","Navbar","type","placeholder","Footer","href","httpLink","createHttpLink","uri","request","operation","setContext","headers","authorization","client","ApolloClient","link","cache","InMemoryCache","App","className","navbar","repoList","footer","GET_REPOSITORIES_OF_ORGANIZATION","src_templateObject","variables","organization","cursor","undefined","then","result","_result$data$organiza","repositories","pageInfo","edges","endCursor","hasNextPage","Error","_result$data$organiza2","catch","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.375f0eeb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\n\nclass RepoListItem extends Component {\n  render() {\n    return (\n      <li>\n        <h2>{this.props.repo.name}</h2>\n      </li>\n    )\n  }\n}\n\nexport default RepoListItem;\n","import React from 'react';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport RepoListItem from './repoListItem';\n\nclass RepoList extends React.Component {\n  render() {\n    const mockRepos = [\n      {\n        id: 1,\n        name: 'Super Cool Project'\n      },\n      {\n        id: 2,\n        name: 'Somewhat Less Cool Project'\n      }\n    ]\n\n    const GET_FEED_QUERY = gql`\n      query($organization: String!, $cursor: String) {\n        organization(login: $organization) {\n          name\n          url\n          repositories(\n            first: 5\n            orderBy: { direction: DESC, field: STARGAZERS }\n            after: $cursor\n          ) {\n            edges {\n              node {\n                ...repository\n              }\n            }\n            pageInfo {\n              endCursor\n              hasNextPage\n            }\n          }\n        }\n      }\n      fragment repository on Repository {\n        name\n        url\n      }\n    `;\n    \n    return (\n      <Query query={GET_FEED_QUERY}>\n          {\n            ({ loading, error, data }) => {\n              if (loading) return <div>Fetching</div>\n              if (error) {\n                console.log('THIS IS THE ERROR: ', error);\n                return <div>Error</div>\n              }\n              console.log('THISISDADA?TA: ', data);\n\n              const renderingRepos = data.feed.repos.map(repo =>\n                // <RepoListItem repo={repo} key={repo.id} />\n                <div>\n                  {repo}\n                </div>\n              );\n              const count = renderingRepos.length;\n              return (\n                <ul>\n                  <div>\n                    {renderingRepos}\n                    <div>Showing {count} results</div>\n                  </div>\n                </ul> \n              )\n            }\n          }\n      </Query>\n    )\n  }\n}\n\nexport default RepoList;","import React, { Component } from 'react';\n\nclass Navbar extends Component {\n  render() {\n    return (\n      <nav>\n        <div>\n          <button>\n            Starred\n          </button>\n        </div>\n\n        <div>\n          <input type='text'\n            placeholder='Search'>\n          </input>\n        </div>\n      </nav>\n    )\n  }\n}\n\nexport default Navbar;","import React from 'react';\n\nconst Footer = () => (\n  <footer>\n    <div>\n      <a href='https://www.linkedin.com/in/jacob-butler-a2ab7093'>\n        LinkedIn\n      </a>\n    </div>\n\n    <div>\n      <a href='https://dramaze.github.io/personal_site/'>\n        Portfolio\n      </a>\n    </div>\n\n    <div>\n      <a href='https://github.com/DrAmaze'>\n        GitHub\n      </a>\n    </div>\n  </footer>\n);\n\nexport default Footer;","import React, { Component } from 'react';\nimport RepoList from './repos/repoList';\nimport Navbar from './utility/navbar';\nimport Footer from './utility/footer';\nimport './App.css';\nimport { createHttpLink } from 'apollo-link-http';\nimport { ApolloClient, ApolloLink, InMemoryCache } from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport 'dotenv/config';\n\nconst httpLink = createHttpLink({\n  uri: 'https://api.github.com/graphql',\n  request: operation => {\n    operation.setContext({\n      headers: { authorization: `Bearer aaa6b71fc43f2440e1c287bd80e6d16bd762cbe4` }\n    });\n  }\n});\n\n// const authMiddleware = new ApolloLink((operation, forward) => {\n//   operation.setContext({\n//     headers: { authorization: `Bearer aaa6b71fc43f2440e1c287bd80e6d16bd762cbe4` || null }\n//   });\n//   return forward(operation);\n// });\n\n// const link = ApolloLink.from([httpLink, authMiddleware])\n\nconst client = new ApolloClient({\n  // link: concat(authMiddleware, httpLink),\n  link: httpLink,\n  cache: new InMemoryCache()\n});\n\n// This component operates as the dashboard of the single-page app\nclass App extends Component {\n\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h1>StarHUB</h1>\n          </header>\n          <Navbar />\n          <RepoList />\n          <Footer />\n        </div>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport App from './components/App';\n\nimport { createHttpLink } from 'apollo-link-http';\nimport { ApolloClient, ApolloLink, InMemoryCache } from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport 'dotenv/config';\nimport 'cross-fetch/polyfill';\nimport gql from 'graphql-tag';\n\nconst httpLink = createHttpLink({\n  uri: 'https://api.github.com/graphql',\n  request: operation => {\n    operation.setContext({\n      headers: { authorization: `Bearer aaa6b71fc43f2440e1c287bd80e6d16bd762cbe4` }\n    });\n  }\n});\n\n// const authMiddleware = new ApolloLink((operation, forward) => {\n//   operation.setContext({\n//     headers: { authorization: `Bearer aaa6b71fc43f2440e1c287bd80e6d16bd762cbe4` || null }\n//   });\n//   return forward(operation);\n// });\n\n// const link = ApolloLink.from([httpLink, authMiddleware])\n\nconst client = new ApolloClient({\n  // link: concat(authMiddleware, httpLink),\n  link: httpLink,\n  cache: new InMemoryCache()\n});\n\nconst GET_REPOSITORIES_OF_ORGANIZATION = gql`\n  query($organization: String!, $cursor: String) {\n    organization(login: $organization) {\n      name\n      url\n      repositories(\n        first: 5\n        orderBy: { direction: DESC, field: STARGAZERS }\n        after: $cursor\n      ) {\n        edges {\n          node {\n            ...repository\n          }\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n    }\n  }\n  fragment repository on Repository {\n    name\n    url\n  }\n`;\n\nclient\n  .query({\n    query: GET_REPOSITORIES_OF_ORGANIZATION,\n    variables: {\n      organization: 'the-road-to-learn-react',\n      cursor: undefined,\n    },\n  })\n  // resolve first page\n  .then(result => {\n    const { pageInfo, edges } = result.data.organization.repositories;\n    const { endCursor, hasNextPage } = pageInfo;\n\n    console.log('second page', edges.length);\n    console.log('endCursor', endCursor);\n\n    return pageInfo;\n  })\n  // query second page\n  .then(({ endCursor, hasNextPage }) => {\n    if (!hasNextPage) {\n      throw Error('no next page');\n    }\n\n    return client.query({\n      query: GET_REPOSITORIES_OF_ORGANIZATION,\n      variables: {\n        organization: 'the-road-to-learn-react',\n        cursor: endCursor,\n      },\n    });\n  })\n  // resolve second page\n  .then(result => {\n    const { pageInfo, edges } = result.data.organization.repositories;\n    const { endCursor, hasNextPage } = pageInfo;\n\n    console.log('second page', edges.length);\n    console.log('endCursor', endCursor);\n\n    return pageInfo;\n  })\n  // log error when there is no next page\n  .catch(console.log);\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}